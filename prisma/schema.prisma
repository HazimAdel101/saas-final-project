generator client {
  provider = "prisma-client-js"
  seed     = "tsx prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Service {
  id            Int             @id @default(autoincrement())
  price_usd     Float
  price_ksa     Float
  discount_usd  Float
  discount_ksa  Float
  image_url     String
  brand_id      Int?
  ServiceDetails ServiceDetail[]
  subscriptions Subscription[]
  categories    ServiceCategory[]
  tags          ServiceTag[]
  brand         Brand?          @relation(fields: [brand_id], references: [id], onDelete: Cascade)
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt
}

model ServiceDetail {
  id          Int      @id @default(autoincrement())
  service_id  Int
  name        String
  description String
  features    String  // SQLite doesn't have native JSON, store as string
  language_id Int
  company     String?
  service     Service  @relation(fields: [service_id], references: [id], onDelete: Cascade)
  language    Language @relation(fields: [language_id], references: [id], onDelete: Cascade)
}

model Language {
  id    Int    @id @default(autoincrement())
  name  String
  code  String @unique
  ServiceDetails ServiceDetail[]
  categoryTranslations CategoryTranslation[]
  tagTranslations      TagTranslation[]
}

model Subscription {
  id                Int      @id @default(autoincrement())
  customer_name     String?
  subscription_price Float?
  client_mail       String?
  phone_number      String?
  notes             String?
  start_date        DateTime
  end_date          DateTime
  subscription_email String
  service_id        Int?
  service           Service? @relation(fields: [service_id], references: [id])
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
}

model Brand {
  id        Int       @id @default(autoincrement())
  name      String
  color     String
  services  Service[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Category {
  id          Int      @id @default(autoincrement())
  color       String
  services    ServiceCategory[]
  translations CategoryTranslation[]
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model Tag {
  id          Int      @id @default(autoincrement())
  color       String
  services    ServiceTag[]
  translations TagTranslation[]
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model ServiceCategory {
  id          Int      @id @default(autoincrement())
  service_id  Int
  category_id Int
  service     Service  @relation(fields: [service_id], references: [id], onDelete: Cascade)
  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade)
  created_at  DateTime @default(now())

  @@unique([service_id, category_id])
}

model ServiceTag {
  id         Int     @id @default(autoincrement())
  service_id Int
  tag_id     Int
  service    Service @relation(fields: [service_id], references: [id], onDelete: Cascade)
  tag        Tag     @relation(fields: [tag_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())

  @@unique([service_id, tag_id])
}

model CategoryTranslation {
  id          Int      @id @default(autoincrement())
  category_id Int
  language_id Int
  name        String
  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade)
  language    Language @relation(fields: [language_id], references: [id], onDelete: Cascade)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@unique([category_id, language_id])
}

model TagTranslation {
  id          Int      @id @default(autoincrement())
  tag_id      Int
  language_id Int
  name        String
  tag         Tag      @relation(fields: [tag_id], references: [id], onDelete: Cascade)
  language    Language @relation(fields: [language_id], references: [id], onDelete: Cascade)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@unique([tag_id, language_id])
}